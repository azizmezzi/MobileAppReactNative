# This file contains the fastlane.tools configuration
# You can find the documentation at https://docs.fastlane.tools
#
# For a list of all available actions, check out
#
#     https://docs.fastlane.tools/actions
#
# For a list of all available plugins, check out
#
#     https://docs.fastlane.tools/plugins/available-plugins
#

# Uncomment the line if you want fastlane to automatically update itself
# update_fastlane

default_platform(:android)
def getVersionCode
  # Instead of managing the version code manually it is based on a timestamp in seconds
  # Any build done more recently is considered to be a higher version
  # versionCode increase every minute (so max 1 build per minute)
  # versionCode cannot be smaller than legacyVersionCode
  thirtySeptemberTwentyTwenty = 1601480940 / 60
  legacyVersionCode = 10902
  versionCode = legacyVersionCode + (Time.now.to_i / 60) - thirtySeptemberTwentyTwenty

  if versionCode > 2100000000
    raise "versionCode cannot be higher than 2100000000"
  end

  versionCode.floor()
end
 
platform :android do
  desc "Runs all the tests"
  lane :test do
    gradle(task: "test")
  end
  desc "Increments internal build number tracking (different than version)" 
    lane :bump_build_number do 
     android_set_version_code( 
      version_code: getVersionCode() 
     ) 
  end 
  desc "Submit a new Beta Build to Crashlytics Beta"
  lane :beta do
    gradle(task: "clean assembleRelease")
    crashlytics
  
    # sh "your_script.sh"
    # You can also use other beta testing services here
  end

  desc "Deploy a new version to the Google Play"
  lane :deploy do
    gradle(task: "clean assembleRelease")
    upload_to_play_store
  end
  desc "Archive build Ad Hoc"
  lane :buildReleaseAPK do
    gradle(task: "clean")
    gradle( task: "bundle" ,build_type: "Release" )
   # upload_to_play_store( track: 'internal', release_status: 'draft', aab: '/home/aziz/Documents/NoobaProject/Nooba/android/app/build/outputs/bundle/release/app-release.aab',skip_upload_apk:'true' )

  end
  desc "upload to Beta by FireBase"
	lane :uploadFirebaseDev do
    firebase_app_distribution(
      app: "1:263227746073:android:a84cbb35da7ee4233a4788",
      groups: "testeur",
      release_notes: "Version Staging",
      aab: './app/build/outputs/bundle/release/app-release.aab',
      firebase_cli_token: "1//098Mit-RkI44mCgYIARAAGAkSNwF-L9IrGHZj3j6I2YQDsonzessh3MoFRCirbgWu1ShoXCSU5EPA9L8qW4-_bAwf-a4jdDM0qCc",
    )
  end
  desc "Push a new build to Fabric and FireBase App Distribution"
  lane :uploadAPK do

#    buildReleaseAPK
    upload_to_play_store( track: 'internal', release_status: 'draft', aab: '/home/aziz/Documents/NoobaProject/Nooba/android/app/build/outputs/bundle/release/app-release.aab' )
   # uploadFirebaseDev

  end
  desc "Build and uploads the app to playstore for a internal testing release"
  lane :playstoreInternal do |options|
    # Retrieve version of my app in package.json (React Native case)
    package = load_json(json_path: "../package.json")

    # Clean build folder
    gradle(
      task: "clean"
    )

    # Bump android.defaultConfig.versionCode
    bump_build_number
    # upload_to_play_store( track: 'internal', release_status: 'draft', aab: '/home/aziz/Documents/NoobaProject/Nooba/android/app/build/outputs/bundle$


    # Do the bundle of the application
    gradle(
      task: 'bundle',
      build_type: 'Release',
      properties: {
        # "android.injected.signing.store.file" => Dir.pwd + "/release.keystore",
        # "android.injected.signing.store.password" => options[:RELEASE_KEYSTORE_PASSWORD], # keystore password
        # "android.injected.signing.key.alias" => options[:RELEASE_KEYSTORE_ALIAS], # alias
        # "android.injected.signing.key.password" => options[:RELEASE_KEYSTORE_KEY_PASSWORD], # key password
        "vname" => package["version"]
      }
    )

    # Upload Android App Bundle to PlayStore like Internal testing Release
    upload_to_play_store(
      track: 'internal',
      release_status: 'draft', # <http://docs.fastlane.tools/actions/upload_to_play_store/#parameters>
      skip_upload_apk: true,
      version_name: package["version"]
    )
  end
end
